using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Shell32;

namespace TransparentForm
{

    public partial class Form1 : Form
    {
        [System.Runtime.InteropServices.DllImport("user32.dll")]
        static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);
        public bool alreadyUsed = false; //dlete this

        public Form1()
        {
            InitializeComponent();

            this.TopMost = true;

            SetStyle(ControlStyles.SupportsTransparentBackColor, true);
            SetStyle(ControlStyles.UserPaint, true);

            // Create the form layout. If you are using Visual Studio, 
            // you can replace this code with code generated by the designer. 
            InitializeForm();

            // The following events are not visible in the designer, so 
            // you must associate them with their event-handlers in code.
            webBrowser1.CanGoBackChanged +=
                new EventHandler(webBrowser1_CanGoBackChanged);
            webBrowser1.CanGoForwardChanged +=
                new EventHandler(webBrowser1_CanGoForwardChanged);
            webBrowser1.DocumentTitleChanged +=
                new EventHandler(webBrowser1_DocumentTitleChanged);
            webBrowser1.StatusTextChanged +=
                new EventHandler(webBrowser1_StatusTextChanged);

            Navigate("http://www.netflix.com/browse");
            //webBrowser1.GoHome();
        }

        private void Form1_HandleCreated(object sender, System.EventArgs e, string app)
        {

            int count = 1;
            //var clientApplication = Process.Start(app);


            //SetParent(clientApplication.MainWindowHandle, this.Handle);
        }

        // Displays the Save dialog box.
        private void saveAsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            webBrowser1.ShowSaveAsDialog();
        }

        // Displays the Page Setup dialog box.
        private void pageSetupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            webBrowser1.ShowPageSetupDialog();
        }

        // Displays the Print dialog box.
        private void printToolStripMenuItem_Click(object sender, EventArgs e)
        {
            webBrowser1.ShowPrintDialog();
        }

        // Displays the Print Preview dialog box.
        private void printPreviewToolStripMenuItem_Click(
            object sender, EventArgs e)
        {
            webBrowser1.ShowPrintPreviewDialog();
        }

        // Displays the Properties dialog box.
        private void propertiesToolStripMenuItem_Click(
            object sender, EventArgs e)
        {
            webBrowser1.ShowPropertiesDialog();
        }

        // Selects all the text in the text box when the user clicks it. 
        private void toolStripTextBox1_Click(object sender, EventArgs e)
        {
            toolStripTextBox1.SelectAll();
        }

        // Navigates to the URL in the address box when 
        // the ENTER key is pressed while the ToolStripTextBox has focus.
        private void toolStripTextBox1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                Navigate(toolStripTextBox1.Text);
            }
        }

        // Navigates to the URL in the address box when 
        // the Go button is clicked.
        private void goButton_Click(object sender, EventArgs e)
        {
            Navigate(toolStripTextBox1.Text);
        }

        // Navigates to the given URL if it is valid.
        private void Navigate(String address)
        {
            if (String.IsNullOrEmpty(address))
                return;
            if (address.Equals("about:blank"))
                return;
            if (!address.StartsWith("http://") &&
                !address.StartsWith("https://"))
            {
                address = "http://" + address;
            }
            try
            {
                webBrowser1.Navigate(new Uri(address));
            }
            catch (System.UriFormatException)
            {
                return;
            }
        }

        // Updates the URL in TextBoxAddress upon navigation.
        private void webBrowser1_Navigated(object sender,
            WebBrowserNavigatedEventArgs e)
        {
            toolStripTextBox1.Text = webBrowser1.Url.ToString();
        }

        // Navigates webBrowser1 to the previous page in the history.
        private void backButton_Click(object sender, EventArgs e)
        {
            webBrowser1.GoBack();
        }

        // Disables the Back button at the beginning of the navigation history.
        private void webBrowser1_CanGoBackChanged(object sender, EventArgs e)
        {
            backButton.Enabled = webBrowser1.CanGoBack;
        }

        // Navigates webBrowser1 to the next page in history.
        private void forwardButton_Click(object sender, EventArgs e)
        {
            webBrowser1.GoForward();
        }

        // Disables the Forward button at the end of navigation history.
        private void webBrowser1_CanGoForwardChanged(object sender, EventArgs e)
        {
            forwardButton.Enabled = webBrowser1.CanGoForward;
        }

        // Halts the current navigation and any sounds or animations on 
        // the page.
        private void stopButton_Click(object sender, EventArgs e)
        {
            webBrowser1.Stop();
        }

        // Reloads the current page.
        private void refreshButton_Click(object sender, EventArgs e)
        {
            // Skip refresh if about:blank is loaded to avoid removing
            // content specified by the DocumentText property.
            if (!webBrowser1.Url.Equals("about:blank"))
            {
                webBrowser1.Refresh();
            }
        }

        // Navigates webBrowser1 to the home page of the current user.
        private void homeButton_Click(object sender, EventArgs e)
        {
            webBrowser1.GoHome();
        }

        // Navigates webBrowser1 to the search page of the current user.
        private void searchButton_Click(object sender, EventArgs e)
        {
            webBrowser1.GoSearch();
        }

        // Prints the current document using the current print settings.
        private void printButton_Click(object sender, EventArgs e)
        {
            webBrowser1.Print();
        }

        // Updates the status bar with the current browser status text.
        private void webBrowser1_StatusTextChanged(object sender, EventArgs e)
        {
            toolStripStatusLabel1.Text = webBrowser1.StatusText;
        }

        // Updates the title bar with the current document title.
        private void webBrowser1_DocumentTitleChanged(object sender, EventArgs e)
        {
            this.Text = webBrowser1.DocumentTitle;
        }

        // Exits the application.
        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        // The remaining code in this file provides basic form initialization and 
        // includes a Main method. If you use the Visual Studio designer to create
        // your form, you can use the designer generated code instead of this code, 
        // but be sure to use the names shown in the variable declarations here,
        // and be sure to attach the event handlers to the associated events. 

        private WebBrowser webBrowser1;

        private MenuStrip menuStrip1;
        private ToolStripMenuItem fileToolStripMenuItem,
            saveAsToolStripMenuItem, printToolStripMenuItem,
            printPreviewToolStripMenuItem, exitToolStripMenuItem,
            pageSetupToolStripMenuItem, propertiesToolStripMenuItem;
        private ToolStripSeparator toolStripSeparator1, toolStripSeparator2;

        private ToolStrip toolStrip1, toolStrip2, toolStrip3;
        private ToolStripTextBox toolStripTextBox1;
        private ToolStripButton goButton, backButton,
            forwardButton, stopButton, refreshButton,
            homeButton, searchButton, printButton;

        private StatusStrip statusStrip1;
        private ToolStripStatusLabel toolStripStatusLabel1;

        private TrackBar trackBar1;
        private Label scrollLabel = new Label();
        private CheckBox lockPage = new CheckBox();

        private void InitializeForm()
        {
            webBrowser1 = new WebBrowser();
            menuStrip1 = new MenuStrip();
            fileToolStripMenuItem = new ToolStripMenuItem();
            saveAsToolStripMenuItem = new ToolStripMenuItem();
            toolStripSeparator1 = new ToolStripSeparator();
            printToolStripMenuItem = new ToolStripMenuItem();
            printPreviewToolStripMenuItem = new ToolStripMenuItem();
            toolStripSeparator2 = new ToolStripSeparator();
            exitToolStripMenuItem = new ToolStripMenuItem();
            pageSetupToolStripMenuItem = new ToolStripMenuItem();
            propertiesToolStripMenuItem = new ToolStripMenuItem();

            toolStrip1 = new ToolStrip();
            goButton = new ToolStripButton();
            backButton = new ToolStripButton();
            forwardButton = new ToolStripButton();
            stopButton = new ToolStripButton();
            refreshButton = new ToolStripButton();
            homeButton = new ToolStripButton();
            searchButton = new ToolStripButton();
            printButton = new ToolStripButton();

            toolStrip2 = new ToolStrip();
            toolStripTextBox1 = new ToolStripTextBox();

            statusStrip1 = new StatusStrip();
            toolStripStatusLabel1 = new ToolStripStatusLabel();

            toolStrip3 = new ToolStrip();
            trackBar1 = new TrackBar();


            printToolStripMenuItem.ShortcutKeys = Keys.Control | Keys.P;

            saveAsToolStripMenuItem.Click +=
                new System.EventHandler(saveAsToolStripMenuItem_Click);
            pageSetupToolStripMenuItem.Click +=
                new System.EventHandler(pageSetupToolStripMenuItem_Click);
            printToolStripMenuItem.Click +=
                new System.EventHandler(printToolStripMenuItem_Click);
            printPreviewToolStripMenuItem.Click +=
                new System.EventHandler(printPreviewToolStripMenuItem_Click);
            propertiesToolStripMenuItem.Click +=
                new System.EventHandler(propertiesToolStripMenuItem_Click);
            exitToolStripMenuItem.Click +=
                new System.EventHandler(exitToolStripMenuItem_Click);

            toolStrip1.Items.AddRange(new ToolStripItem[] {
                goButton, backButton, forwardButton, stopButton,
                refreshButton, homeButton, searchButton, printButton});

            goButton.Text = "Go";
            backButton.Text = "Back";
            forwardButton.Text = "Forward";
            stopButton.Text = "Stop";
            refreshButton.Text = "Refresh";
            homeButton.Text = "Home";
            searchButton.Text = "Search";
            printButton.Text = "Print";

            backButton.Enabled = false;
            forwardButton.Enabled = false;

            goButton.Click += new System.EventHandler(goButton_Click);
            backButton.Click += new System.EventHandler(backButton_Click);
            forwardButton.Click += new System.EventHandler(forwardButton_Click);
            stopButton.Click += new System.EventHandler(stopButton_Click);
            refreshButton.Click += new System.EventHandler(refreshButton_Click);
            homeButton.Click += new System.EventHandler(homeButton_Click);
            searchButton.Click += new System.EventHandler(searchButton_Click);
            printButton.Click += new System.EventHandler(printButton_Click);

            toolStrip2.Items.Add(toolStripTextBox1);

            toolStripTextBox1.Size = new System.Drawing.Size(500, 25);
            toolStripTextBox1.KeyDown +=
                new KeyEventHandler(toolStripTextBox1_KeyDown);
            toolStripTextBox1.Click +=
                new System.EventHandler(toolStripTextBox1_Click);

            statusStrip1.Items.Add(toolStripStatusLabel1);

            webBrowser1.Dock = DockStyle.Fill;
            webBrowser1.Navigated +=
                new WebBrowserNavigatedEventHandler(webBrowser1_Navigated);

            scrollLabel.Text = "Transparency: " + trackBar1.Value;
            //scrollLabel.Location = new Point(trackBar1.Width);
            scrollLabel.TextAlign = ContentAlignment.MiddleCenter;

            // Set up the TrackBar.
            //this.trackBar1.Location = new System.Drawing.Point(scrollLabel.Right);
            this.scrollLabel.Location = new System.Drawing.Point(toolStripTextBox1.Bounds.Right + 2);
            this.trackBar1.Location = new System.Drawing.Point(scrollLabel.Right + 2);
            this.trackBar1.Size = new System.Drawing.Size(224, 10);
            this.trackBar1.Scroll += new System.EventHandler(this.trackBar1_Scroll);
            lockPage.Text = "Lock Page ";
            this.lockPage.Location = new Point(trackBar1.Right + 2);
            this.lockPage.CheckedChanged += new EventHandler(this.lockPage_Check);

            // The Maximum property sets the value of the track bar when
            // the slider is all the way to the right.
            trackBar1.Maximum = 100;

            // The TickFrequency property establishes how many positions
            // are between each tick-mark.
            trackBar1.TickFrequency = 5;

            // The LargeChange property sets how many positions to move
            // if the bar is clicked on either side of the slider.
            trackBar1.LargeChange = 10;

            // The SmallChange property sets how many positions to move
            // if the keyboard arrows are used to move the slider.
            trackBar1.SmallChange = 5;

            //Controls.AddRange(new Control[] {
            //    webBrowser1, toolStrip2, toolStrip1,
            //    menuStrip1, statusStrip1, menuStrip1});


            //Controls.AddRange(new Control[] {
            //    webBrowser1, toolStrip2, toolStrip1,
            //    statusStrip1, menuStrip1, trackBar1, scrollLabel, menuStrip1});
            Controls.Add(scrollLabel);
            Controls.Add(trackBar1);
            Controls.Add(lockPage);

            Controls.AddRange(new Control[] {
                webBrowser1, toolStrip1, toolStrip2,
                statusStrip1});

            //Controls.Add(trackBar1);
            string heyer = "hey";
        }

        private void trackBar1_Scroll(object sender, EventArgs e)
        {
            var stuff = trackBar1;
            scrollLabel.Text = "Transparency: " + trackBar1.Value;
            this.Opacity = ((trackBar1.Value * -1) + 100) / 100d;
            //string hey = "hello";

            //trackBar1.BackColor = Color.FromArgb(250, trackBar1.BackColor.R, trackBar1.BackColor.G, trackBar1.BackColor.B);
        }

        private void lockPage_Check(object sender, EventArgs e)
        {
            if (lockPage.Checked)
            {
                /* have to set to formWindowState.normal because some weird bug where if windows form
                is already full screen (but not covering task bar) maximizing won't cover task bar?*/
                this.WindowState = System.Windows.Forms.FormWindowState.Normal;
                this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
                this.WindowState = System.Windows.Forms.FormWindowState.Maximized;
                this.Bounds = Screen.PrimaryScreen.Bounds;
    
                //this.TransparencyKey = SystemColors.Control;
                // this.BackColor = SystemColors.Control;
                this.TopMost = true;
            }
            else
            {
                this.WindowState = FormWindowState.Maximized;
                this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.Sizable;
            }
        }




        protected override CreateParams CreateParams
        {
            get
            {
                if (!lockPage.Checked) return base.CreateParams;

                CreateParams createParams = base.CreateParams;
                createParams.ExStyle |= 0x00000020; // WS_EX_TRANSPARENT

                return createParams;
            }
        }



        private const int WM_MOUSEACTIVATE = 0x0021, MA_NOACTIVATE = 0x0003;

        //protected override void WndProc(ref Message m)
        //{
        //    if (m.Msg == WM_MOUSEACTIVATE)
        //    {
        //        m.Result = (IntPtr)MA_NOACTIVATE;

        //        if (lockPage.Checked)
        //        {
        //            m.Msg = MA_NOACTIVATE;
        //            base.WndProc(ref m);
        //        }

        //        return;
        //    }

        //    base.WndProc(ref m);
        //}

        //// Code for allowing clicking through of the form
        //protected override void WndProc(ref Message m)
        //{
        //    const uint WM_NCHITTEST = 0x84;

        //    const int HTTRANSPARENT = -1;
        //    const int HTCLIENT = 1;
        //    const int HTCAPTION = 2;
        //    // ... or define an enum with all the values

        //    if (m.Msg == WM_NCHITTEST)
        //    {
        //        // If it's the message we want, handle it.
        //        if (!lockPage.Checked)
        //        {
        //            // If we're drawing, we want to see mouse events like normal.
        //            m.Result = new IntPtr(HTCLIENT);
        //        }
        //        else
        //        {
        //            // Otherwise, we want to pass mouse events on to the desktop,
        //            // as if we were not even here.
        //            m.Result = new IntPtr(HTTRANSPARENT);
        //        }

        //        return;  // bail out because we've handled the message
        //    }

        //    if (lockPage.Checked)
        //    {
        //        m.Result = new IntPtr(HTTRANSPARENT);
        //        // return;
        //    }

        //    // Otherwise, call the base class implementation for default processing.
        //    base.WndProc(ref m);
        //}

        //public Form1()
        //{
        //    InitializeComponent();
        //}
    }
}
